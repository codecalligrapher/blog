<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Codes on Aadi</title>
    <link>https://aadi-blogs.web.app/code/</link>
    <description>Recent content in Codes on Aadi</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Â©2022 {year}</copyright>
    <lastBuildDate>Fri, 31 Mar 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://aadi-blogs.web.app/code/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Setting Up Spark for PyTest</title>
      <link>https://aadi-blogs.web.app/code/pytest-spark/</link>
      <pubDate>Fri, 31 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://aadi-blogs.web.app/code/pytest-spark/</guid>
      <description>false</description>
    </item>
    
    <item>
      <title>Randomly Populating Pyspark Columns</title>
      <link>https://aadi-blogs.web.app/code/spark-rand/</link>
      <pubDate>Thu, 16 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://aadi-blogs.web.app/code/spark-rand/</guid>
      <description>false</description>
    </item>
    
    <item>
      <title>Dictionary for Automatically Loading Tables</title>
      <link>https://aadi-blogs.web.app/code/autoload/</link>
      <pubDate>Thu, 26 Jan 2023 00:00:00 +0000</pubDate>
      
      <guid>https://aadi-blogs.web.app/code/autoload/</guid>
      <description>false</description>
    </item>
    
    <item>
      <title>Metaclass for Auto Initialization</title>
      <link>https://aadi-blogs.web.app/code/initmeta/</link>
      <pubDate>Wed, 21 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>https://aadi-blogs.web.app/code/initmeta/</guid>
      <description>false</description>
    </item>
    
    <item>
      <title>XGBoost Evaluation Classes</title>
      <link>https://aadi-blogs.web.app/code/xgboost-eval/</link>
      <pubDate>Thu, 08 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>https://aadi-blogs.web.app/code/xgboost-eval/</guid>
      <description>false</description>
    </item>
    
    <item>
      <title>TensorFlow Custom Loop</title>
      <link>https://aadi-blogs.web.app/code/tf-loop/</link>
      <pubDate>Wed, 30 Nov 2022 00:38:42 -0400</pubDate>
      
      <guid>https://aadi-blogs.web.app/code/tf-loop/</guid>
      <description>A pattern I use for pretty-progress bars, custom logging and metric-handling in tensorflow.
&#39;&#39;&#39; This overviews the TensorFlow custom training loop in its (what I think is) most general sense. Four steps: 1. Define Model 2. Define Metrics, Optimizer and Losses 3. Define train and test (validation) functions 4. Write training loop &#39;&#39;&#39; import wandb import yaml import tensorflow as tf from tensorflow import keras from tensorflow.keras import layers import numpy as np import enlighten import logging import time from dataclasses import dataclass # STEP 0 - Set up datasets &#39;&#39;&#39; --------------------------------------------------------- STEP 1 - Define Model Define inputs, outputs and wrap using keras &#39;&#39;&#39; inputs = .</description>
    </item>
    
    <item>
      <title>Parsing XML with untangle</title>
      <link>https://aadi-blogs.web.app/code/untangle-xml/</link>
      <pubDate>Mon, 12 Sep 2022 06:38:42 -0400</pubDate>
      
      <guid>https://aadi-blogs.web.app/code/untangle-xml/</guid>
      <description>Given XML:
&amp;lt;?xml version=&amp;quot;1.0&amp;quot;?&amp;gt; &amp;lt;root&amp;gt; &amp;lt;child name=&amp;quot;child1&amp;quot;/&amp;gt; &amp;lt;/root&amp;gt; Python access
import untangle doc = untangle.parse(&#39;path/to/xml.xml&#39;) # gives hierarchical access child_name = doc.root.child[&#39;name&#39;] # &#39;child1&#39; </description>
    </item>
    
    <item>
      <title>Sync Script</title>
      <link>https://aadi-blogs.web.app/code/sync-script/</link>
      <pubDate>Sun, 24 Jul 2022 12:38:42 -0400</pubDate>
      
      <guid>https://aadi-blogs.web.app/code/sync-script/</guid>
      <description>#!/usr/bin/zsh while getopts a: flag do case &amp;quot;${flag}&amp;quot; in a) remote=${OPTARG};; esac done echo &amp;quot;remote IP: $remote&amp;quot;; echo &amp;quot;write: $final&amp;quot;; home_dir=&amp;quot;/home/aadi/&amp;quot; storage_dir=&amp;quot;/storage/&amp;quot; # files in home HomeArray=( &amp;quot;.zshrc&amp;quot; ) if [[ $* == *--write* ]] then for arr in $HomeArray; do rsync -Pvtau $home_dir$arr aadi@$remote:$home_dir$arr done else for arr in $HomeArray; do rsync -Pvntau $home_dir$arr aadi@$remote:$home_dir$arr done fi # folders in home HomeArray=( &amp;quot;.config/alacritty&amp;quot; &amp;quot;.config/qtile&amp;quot; &amp;quot;.config/nvim&amp;quot; ) if [[ $* == *--write* ]] then for arr in $HomeArray; do rsync -Pvtau $home_dir$arr/ aadi@$remote:$home_dir$arr done else for arr in $HomeArray; do rsync -Pvntau $home_dir$arr/ aadi@$remote:$home_dir$arr done fi # files in storage SArray=( &amp;quot;reading&amp;quot; &amp;quot;research&amp;quot; ) if [[ $* == *--write* ]] then for arr in $SArray; do rsync -Pvtau $storage_dir$arr/ aadi@$remote:$home_dir$arr done else for arr in $SArray; do rsync -Pvntau $storage_dir$arr/ aadi@$remote:$home_dir$arr done fi </description>
    </item>
    
    <item>
      <title>PySpark Fill Rates</title>
      <link>https://aadi-blogs.web.app/code/pyspark-fill-rate/</link>
      <pubDate>Thu, 21 Jul 2022 06:38:42 -0400</pubDate>
      
      <guid>https://aadi-blogs.web.app/code/pyspark-fill-rate/</guid>
      <description>false</description>
    </item>
    
  </channel>
</rss>
