<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>python on Aadi</title>
    <link>https://aadi-blogs.web.app/tags/python/</link>
    <description>Recent content in python on Aadi</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Â©2022 {year}</copyright>
    <lastBuildDate>Thu, 16 Mar 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://aadi-blogs.web.app/tags/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Randomly Populating Pyspark Columns</title>
      <link>https://aadi-blogs.web.app/code/spark-rand/</link>
      <pubDate>Thu, 16 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://aadi-blogs.web.app/code/spark-rand/</guid>
      <description>false</description>
    </item>
    
    <item>
      <title>Dictionary for Automatically Loading Tables</title>
      <link>https://aadi-blogs.web.app/code/autoload/</link>
      <pubDate>Thu, 26 Jan 2023 00:00:00 +0000</pubDate>
      
      <guid>https://aadi-blogs.web.app/code/autoload/</guid>
      <description>false</description>
    </item>
    
    <item>
      <title>Patterns for Customizing Class Creation</title>
      <link>https://aadi-blogs.web.app/blog/custom-init-subclass/</link>
      <pubDate>Sat, 24 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>https://aadi-blogs.web.app/blog/custom-init-subclass/</guid>
      <description>__init_subclass__ was introduced in PEP 487 and according to James Powell covers every use that was previously done in metaclasses (with the one exception being implementation of protocols on types). It&amp;rsquo;s main purpose was to customize subclass creation
Just to get it out of the way, let&amp;rsquo;s see the order in which these functions are called (the other functions being __new__ and __init__)
class Parent: def __init__(self, *args, **kwargs) -&amp;gt; None: print(&#39;Parent __init__&#39;) def __new__(cls, *args, **kwargs): print(&#39;Parent __new__&#39;) return super().</description>
    </item>
    
    <item>
      <title>Metaclass for Auto Initialization</title>
      <link>https://aadi-blogs.web.app/code/initmeta/</link>
      <pubDate>Wed, 21 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>https://aadi-blogs.web.app/code/initmeta/</guid>
      <description>false</description>
    </item>
    
    <item>
      <title>Experiments customizing `__new__` in Python</title>
      <link>https://aadi-blogs.web.app/blog/customizing_new/</link>
      <pubDate>Mon, 12 Dec 2022 06:38:42 -0400</pubDate>
      
      <guid>https://aadi-blogs.web.app/blog/customizing_new/</guid>
      <description>object.__new__(cls[, ...]) __new__ is called to create a new instance of class cls. It is a static method, which takes the class of which an instances was requested as its first argument. Remaining are arguments passed into the constructor. The return value should be a new object instance (if this is not returned, the instance is not created)
Typically call super().__new(cls[, ...]).
__init__ vs __new__ According to the python docs, __new__ was for customizing instance creation when subclassing built-int types.</description>
    </item>
    
    <item>
      <title>XGBoost Evaluation Classes</title>
      <link>https://aadi-blogs.web.app/code/xgboost-eval/</link>
      <pubDate>Thu, 08 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>https://aadi-blogs.web.app/code/xgboost-eval/</guid>
      <description>false</description>
    </item>
    
    <item>
      <title>XGBoost, Imbalanced Classification and Hyperopt</title>
      <link>https://aadi-blogs.web.app/blog/hyperparamtuning/</link>
      <pubDate>Tue, 06 Dec 2022 06:38:42 -0400</pubDate>
      
      <guid>https://aadi-blogs.web.app/blog/hyperparamtuning/</guid>
      <description>This is a tutorial/explanation of how to set up XGBoost for imbalanced classification while tuning for imbalanced data.
There are three main sections:
Hyperopt/Bayesian Hyperparameter Tuning Focal and Crossentropy losses XGBoost Parameter Meanings (references are dropped as-needed)
Hyperopt The hyperopt package is associated with Bergstra et. al.. The authors argued that the performance of a given model depends both on the fundamental quality of the algorithm as well as details of its tuning (also known as its hyper-parameters).</description>
    </item>
    
    <item>
      <title>Enforcing Function Implementation in Subclasses</title>
      <link>https://aadi-blogs.web.app/blog/enforce-override/</link>
      <pubDate>Wed, 09 Nov 2022 12:38:42 -0400</pubDate>
      
      <guid>https://aadi-blogs.web.app/blog/enforce-override/</guid>
      <description>This is going to get very weird, very quickly. When you create a class in Python, it looks about like the following:
class MyClass: pass Now, let&amp;rsquo;s say I create some really cool class, with a set of cool functions, but I expect my users to implement some of the functions:
from abc import abstractmethod class BaseClass: @abstractmethod def foo(self,): raise NotImplementedError So the intention is, when my user inherits the above class, they do the following:</description>
    </item>
    
    <item>
      <title>Managed Attributes in Python</title>
      <link>https://aadi-blogs.web.app/blog/metaprogramming-in-data-science/</link>
      <pubDate>Sat, 05 Nov 2022 00:38:42 -0400</pubDate>
      
      <guid>https://aadi-blogs.web.app/blog/metaprogramming-in-data-science/</guid>
      <description>In a previous post, I detailed how to maintain encapsulation using Python&amp;rsquo;s property. In this piece, I go through how/why to manage and apply validation to class attributes in an object-oriented fashion by means of a fairly plausible example.
A type is the parent class of class, therefore any class is actually a sub-type of type. The following are equivalent:
a = int(8) a = 8 type(a) # python knows to create an int without being explicit int The point of implementing custom attribute types is (in my case), for validation.</description>
    </item>
    
  </channel>
</rss>
